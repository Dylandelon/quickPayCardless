# ALL < *DEBUG < *INFO < *WARN < *ERROR < FATAL < OFF
log4j.rootLogger = DEBUG, stdout, D, I, E

# 控制台输出
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.Threshold = DEBUG 
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#采用类似C中的printf函数的打印格式格式化日志信息，参数如下： 
#%m 输出代码中指定的消息
#%p 输出优先级，即ALL DEBUG INFO WARN ERROR FATAL OFF
#%r 输出自应用启动到输出该log信息耗费的毫秒数  
#%c 输出所属的类目，通常就是所在类的全名  
#%t 输出产生该日志事件的线程名  
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”  
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}  
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
log4j.appender.stdout.layout.ConversionPattern =  %-d{yyyy-MM-dd HH:mm:ss}-%5p %c:%L-%M  %m%n

#Debug 日志输出文件
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = logs/log.debug
log4j.appender.D.Encoding = UTF-8
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}-%5p %c:%L-%M  %m%n

#Debug 日志输出文件
log4j.appender.I = org.apache.log4j.DailyRollingFileAppender
log4j.appender.I.File = logs/log.info
log4j.appender.I.Encoding = UTF-8
log4j.appender.I.Append = true
log4j.appender.I.Threshold = INFO
log4j.appender.I.layout = org.apache.log4j.PatternLayout
log4j.appender.I.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}-%5p %c:%L-%M  %m%n

#Error 日志输出文件
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = logs/log.err
log4j.appender.E.Encoding = UTF-8
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}-%5p %c:%L-%M  %m%n